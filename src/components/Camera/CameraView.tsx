import React, { useState } from 'react';
import VideoPlayer from '../video/VideoPlayer.tsx';
import DeleteCameraModal from './DeleteCameraModal.tsx';
import { useStore } from '../../store/useStore.ts';
import { sentryshotAPI } from '../../api/sentryshot';
import { getLocationForMonitor } from '../../constants/locationMapping';
import './Camera.css';

interface CameraViewProps {
  streamUrl: string;
  monitorName: string;
  monitorId: string;
  isActive?: boolean;
  onClick?: () => void;
}

const CameraView: React.FC<CameraViewProps> = ({
   streamUrl,
   monitorName,
   monitorId,
   isActive = false,
   onClick
 }) => {
  const {
    openCalendar,
    isGridView,
    isAuthenticated,
    connectionStatus,
    camerasConnectionStatus,
    cameras,
    removeCamera,
    hasAdminRights
  } = useStore();

  const location = getLocationForMonitor(monitorId);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–º–µ—Ä–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  const camera = cameras.find(cam => cam.id === monitorId);

  const [error, setError] = useState<string | null>(null);
  const [showControls, setShowControls] = useState(false);
  const [isTogglingCamera, setIsTogglingCamera] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä–∞
  const handleVideoError = (errorMessage: string) => {
    setError(errorMessage);
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø–æ—Ç–æ–∫–∞ (–≤—Å–µ–≥–¥–∞ live stream, —É–±–∏—Ä–∞–µ–º VOD –ª–æ–≥–∏–∫—É)
  const getStreamUrl = (): string => {
    return sentryshotAPI.getStreamUrl(monitorId, false);
  };

  // –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  const handleOpenCalendar = (e: React.MouseEvent) => {
    e.stopPropagation();
    openCalendar(monitorId);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–º–µ—Ä—ã
  const handleCardClick = (e: React.MouseEvent) => {
    if (onClick) {
      onClick();
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
  const handleVideoClick = () => {
    if (onClick) {
      onClick();
    }
  };

  // –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã (—á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞)
  const handleToggleCamera = async (e: React.MouseEvent) => {
    e.stopPropagation();

    if (!isAuthenticated || !camera) return;

    setIsTogglingCamera(true);
    setError(null);

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∞
      const monitors = await sentryshotAPI.getMonitors();
      const currentMonitor = monitors.find(m => m.id === monitorId);
      
      if (!currentMonitor) {
        setError('–ú–æ–Ω–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const updatedMonitor = {
        ...currentMonitor,
        enable: !currentMonitor.enable
      };

      const createRequest = {
        id: updatedMonitor.id,
        name: updatedMonitor.name,
        enable: updatedMonitor.enable,
        rtspUrl: updatedMonitor.sourcertsp.mainStream,
        rtspSubUrl: updatedMonitor.sourcertsp.subStream,
        protocol: updatedMonitor.sourcertsp.protocol.toUpperCase() as 'TCP' | 'UDP',
        alwaysRecord: updatedMonitor.alwaysRecord,
        videoLength: updatedMonitor.videoLength
      };

      console.log(`${currentMonitor.enable ? '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ' : '–í–∫–ª—é—á–µ–Ω–∏–µ'} –∫–∞–º–µ—Ä—ã ${monitorId}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const success = await sentryshotAPI.createOrUpdateMonitor(createRequest);

      if (success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const { updateCameraSettings } = useStore.getState();
        await updateCameraSettings(monitorId, { isActive: !currentMonitor.enable });
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const { loadCameras } = useStore.getState();
        await loadCameras();
        
        console.log(`–ö–∞–º–µ—Ä–∞ ${monitorId} ${!currentMonitor.enable ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`);
      } else {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–º–µ—Ä—ã');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–º–µ—Ä–æ–π');
    } finally {
      setIsTogglingCamera(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
  const handleDeleteClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    setShowDeleteModal(true);
  };

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
  const handleConfirmDelete = async () => {
    if (!isAuthenticated || !camera || !hasAdminRights) return;

    try {
      console.log(`–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã ${monitorId} (${monitorName})`);
      
      const success = await removeCamera(monitorId);
      
      if (success) {
        console.log(`–ö–∞–º–µ—Ä–∞ ${monitorId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`);
        setShowDeleteModal(false);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast notification –∑–¥–µ—Å—å
      } else {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        setShowDeleteModal(false);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã:', error);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã');
      setShowDeleteModal(false);
    }
  };

  // –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
  const handleCancelDelete = () => {
    setShowDeleteModal(false);
  };

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–∞–º–µ—Ä—É –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
  const isActiveView = isActive && !isGridView;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
  let cardClass = 'camera-card';
  if (!isGridView && isActive) {
    cardClass = 'camera-card camera-active';
  } else if (isGridView) {
    cardClass = 'camera-card';
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã
  const isCameraOffline = camerasConnectionStatus !== 'connected' || !camera?.isActive;
  const isCameraEnabled = camera?.isActive || false;

  return (
      <>
        <div
            className={cardClass}
            onClick={handleCardClick}
            style={{ cursor: onClick ? 'pointer' : 'default' }}
            onMouseEnter={() => setShowControls(true)}
            onMouseLeave={() => setShowControls(false)}
        >
          <div className="camera-card-header">
            <div className="camera-header-left">
              <span className="camera-card-title">{monitorName}</span>

              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
              <div className="camera-status-indicators">
                  {camerasConnectionStatus !== 'connected' && (
                      <span className="status-indicator server-offline badge-sticker" title="–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º">
                    üî¥ –°–µ—Ä–≤–µ—Ä
                  </span>
                  )}

                  {camerasConnectionStatus === 'connected' && !isCameraEnabled && (
                      <span className="status-indicator camera-disabled badge-sticker" title="–ö–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞">
                    ‚≠ï –û—Ç–∫–ª—é—á–µ–Ω–∞
                  </span>
                  )}

                  {camerasConnectionStatus === 'connected' && isCameraEnabled && (
                      <span className="status-indicator camera-online badge-sticker" title="–ö–∞–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç">
                    üü¢ –û–Ω–ª–∞–π–Ω
                  </span>
                  )}
              </div>
            </div>

            {/* –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π */}
            <div className="camera-header-right">
              {/* –ö–Ω–æ–ø–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∞—Ä—Ö–∏–≤ */}
              <button 
                  className="camera-menu-button" 
                  onClick={handleOpenCalendar}
                  title="–û—Ç–∫—Ä—ã—Ç—å –∞—Ä—Ö–∏–≤"
              >
                <span className="menu-button-circle"></span>
                <span className="menu-button-circle"></span>
                <span className="menu-button-circle"></span>
              </button>

              {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã */}
              {isAuthenticated && hasAdminRights && (
                <button
                  className="camera-delete-button"
                  onClick={handleDeleteClick}
                  title="–£–¥–∞–ª–∏—Ç—å –∫–∞–º–µ—Ä—É"
                >
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path 
                      d="M3 6H5H21M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6H19ZM10 11V17M14 11V17" 
                      stroke="currentColor" 
                      strokeWidth="2" 
                      strokeLinecap="round" 
                      strokeLinejoin="round"
                    />
                  </svg>
                </button>
              )}
            </div>
          </div>

          <div className={`camera-view ${isActive ? 'active' : ''}`}>
            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º */}
            {camerasConnectionStatus !== 'connected' ? (
                <div className="camera-offline">
                  <div className="camera-offline-message">
                    –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º SentryShot
                  </div>
                  <div className="camera-offline-details">
                    –°—Ç–∞—Ç—É—Å: {camerasConnectionStatus}
                  </div>
                  <button 
                    className="camera-reconnect-btn"
                    onClick={(e) => {
                      e.stopPropagation();
                      const { loadCameras } = useStore.getState();
                      loadCameras();
                    }}
                  >
                    –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                  </button>
                </div>
            ) : !isCameraEnabled ? (
                <div className="camera-offline">
                  <div className="camera-offline-message">
                    –ö–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
                  </div>
                  {isAuthenticated && (
                      <button
                          className="camera-enable-btn"
                          onClick={handleToggleCamera}
                          disabled={isTogglingCamera}
                      >
                        {isTogglingCamera ? '–í–∫–ª—é—á–µ–Ω–∏–µ...' : '–í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É'}
                      </button>
                  )}
                </div>
            ) : error ? (
                <div className="camera-error">
                  <div className="camera-error-icon">‚ö†Ô∏è</div>
                  <div className="camera-error-message">{error}</div>
                  <button
                      className="camera-retry-btn"
                      onClick={(e: React.MouseEvent) => {
                        e.stopPropagation();
                        setError(null);
                      }}
                  >
                    –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                  </button>
                </div>
            ) : (
                <VideoPlayer
                    streamUrl={getStreamUrl()}
                    onError={handleVideoError}
                    className="camera-video"
                    isFullscreen={isActiveView}
                    isArchiveMode={false} // –í—Å–µ–≥–¥–∞ false –¥–ª—è live stream
                    onVideoClick={handleVideoClick}
                    monitorId={monitorId}
                />
            )}

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞) */}
            {isCameraEnabled && showControls && (
                <div className="stream-quality-indicator">
                  <div className="quality-bars">
                    <div className={`quality-bar ${camerasConnectionStatus === 'connected' ? 'active' : ''}`}></div>
                    <div className={`quality-bar ${camerasConnectionStatus === 'connected' ? 'active' : ''}`}></div>
                    <div className="quality-bar"></div>
                    <div className="quality-bar"></div>
                  </div>
                </div>
            )}
          </div>
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã */}
        <DeleteCameraModal
          isOpen={showDeleteModal}
          cameraName={monitorName}
          monitorId={monitorId}
          onConfirm={handleConfirmDelete}
          onCancel={handleCancelDelete}
        />
      </>
  );
};

export default CameraView;