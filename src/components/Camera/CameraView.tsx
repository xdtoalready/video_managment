import React, { useState } from 'react';
import VideoPlayer from '../video/VideoPlayer.tsx';
import { useStore } from '../../store/useStore.ts';
import { sentryshotAPI } from '../../api/sentryshot';

interface CameraViewProps {
  streamUrl: string;
  monitorName: string;
  monitorId: string;
  isActive?: boolean;
  onClick?: () => void;
}

const CameraView: React.FC<CameraViewProps> = ({
   streamUrl,
   monitorName,
   monitorId,
   isActive = false,
   onClick
 }) => {
  const {
    openCalendar,
    exitArchiveMode,
    isGridView,
    toggleMotionDetection,
    toggleObjectDetection,
    isAuthenticated,
    connectionStatus
  } = useStore();

  // –°—Ç—Ä–æ–∫–∞ 30 - –ø–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ store –º–µ—Ç–æ–¥
  const location = useStore(state => state.getLocationForCamera(monitorId));

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–º–µ—Ä–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  const camera = useStore(state => state.cameras.find(cam => cam.id === monitorId));

  const [error, setError] = useState<string | null>(null);
  const [showControls, setShowControls] = useState(false);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä–∞
  const handleVideoError = (errorMessage: string) => {
    setError(errorMessage);
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL –ø–æ—Ç–æ–∫–∞ –¥–ª—è SentryShot
  const getStreamUrl = (): string => {
    if (!camera) return streamUrl;

    // –ï—Å–ª–∏ –∞—Ä—Ö–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º VOD
    if (camera.isArchiveMode && camera.archiveStartDate && camera.archiveEndDate) {
      return sentryshotAPI.getVodUrl(
          monitorId,
          camera.archiveStartDate,
          camera.archiveEndDate
      );
    }

    // –î–ª—è –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º HLS –ø–æ—Ç–æ–∫
    return sentryshotAPI.getStreamUrl(monitorId, false);
  };

  // –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  const handleOpenCalendar = (e: React.MouseEvent) => {
    e.stopPropagation();
    openCalendar(monitorId);
  };

  // –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞—Ä—Ö–∏–≤–∞
  const handleExitArchiveMode = (e: React.MouseEvent) => {
    e.stopPropagation();
    exitArchiveMode(monitorId);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–º–µ—Ä—ã
  const handleCardClick = (e: React.MouseEvent) => {
    if (onClick && !camera?.isArchiveMode) {
      onClick();
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
  const handleVideoClick = () => {
    if (onClick && !camera?.isArchiveMode) {
      onClick();
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –¥–≤–∏–∂–µ–Ω–∏—è
  const handleToggleMotion = async (e: React.MouseEvent) => {
    e.stopPropagation();

    if (!isAuthenticated) return;

    try {
      const enable = !camera?.enable; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const success = await toggleMotionDetection(monitorId, enable);

      if (!success) {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º –¥–≤–∏–∂–µ–Ω–∏—è');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º –¥–≤–∏–∂–µ–Ω–∏—è');
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤
  const handleToggleObjects = async (e: React.MouseEvent) => {
    e.stopPropagation();

    if (!isAuthenticated) return;

    try {
      const enable = !camera?.enable; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const success = await toggleObjectDetection(monitorId, enable);

      if (!success) {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º –æ–±—ä–µ–∫—Ç–æ–≤');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º –æ–±—ä–µ–∫—Ç–æ–≤');
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatDate = (date: Date | null | undefined): string => {
    if (!date) return '';
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–∞–º–µ—Ä—É –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
  const isActiveView = isActive && !isGridView;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
  let cardClass = 'camera-card';
  if (!isGridView && isActive) {
    cardClass = 'camera-card camera-active';
  } else if (isGridView) {
    cardClass = 'camera-card';
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –µ—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
  const isCameraOffline = connectionStatus !== 'connected' || !camera?.enable;

  return (
      <div
          className={cardClass}
          onClick={handleCardClick}
          style={{ cursor: onClick ? 'pointer' : 'default' }}
          onMouseEnter={() => setShowControls(true)}
          onMouseLeave={() => setShowControls(false)}
      >
        <div className="camera-card-header">
          <div className="camera-header-left">
            <span className="camera-card-title">{monitorName}</span>

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
            <div className="camera-status-indicators">
              {isCameraOffline && (
                  <span className="status-indicator offline" title="–ö–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞">
                ‚≠ï
              </span>
              )}
              {camera?.alwaysRecord && (
                  <span className="status-indicator recording" title="–ò–¥–µ—Ç –∑–∞–ø–∏—Å—å">
                üî¥
              </span>
              )}
              {isArchiveMode && (
                  <span className="status-indicator archive" title="–ê—Ä—Ö–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º">
                üìº
              </span>
              )}
            </div>
          </div>

          {/* –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π */}
          <div className="camera-header-right">
            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) */}
            {showControls && isAuthenticated && !isArchiveMode && (
                <div className="camera-controls">
                  <button
                      className="control-btn motion"
                      onClick={handleToggleMotion}
                      title="–î–µ—Ç–µ–∫—Ç–æ—Ä –¥–≤–∏–∂–µ–Ω–∏—è"
                  >
                    üèÉ
                  </button>
                  <button
                      className="control-btn objects"
                      onClick={handleToggleObjects}
                      title="–î–µ—Ç–µ–∫—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤"
                  >
                    üë§
                  </button>
                </div>
            )}

            {/* –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é */}
            <button className="camera-menu-button" onClick={handleOpenCalendar}>
              <span className="menu-button-circle"></span>
              <span className="menu-button-circle"></span>
              <span className="menu-button-circle"></span>
            </button>
          </div>
        </div>

        <div className={`camera-view ${isActive ? 'active' : ''}`}>
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–∞–º–µ—Ä—ã */}
          {isCameraOffline ? (
              <div className="camera-offline">
                <div className="camera-offline-icon">üì∑</div>
                <div className="camera-offline-message">
                  {connectionStatus !== 'connected' ? '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' : '–ö–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞'}
                </div>
                {connectionStatus === 'connected' && (
                    <button
                        className="camera-enable-btn"
                        onClick={(e) => {
                          e.stopPropagation();
                          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
                        }}
                    >
                      –í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É
                    </button>
                )}
              </div>
          ) : error ? (
              <div className="camera-error">
                <div className="camera-error-icon">‚ö†Ô∏è</div>
                <div className="camera-error-message">{error}</div>
                <button
                    className="camera-retry-btn"
                    onClick={(e) => {
                      e.stopPropagation();
                      setError(null);
                    }}
                >
                  –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                </button>
              </div>
          ) : (
              <VideoPlayer
                  streamUrl={getStreamUrl()}
                  onError={handleVideoError}
                  className="camera-video"
                  isFullscreen={isActiveView}
                  isArchiveMode={isArchiveMode}
                  onVideoClick={handleVideoClick}
                  monitorId={monitorId} // –ü–µ—Ä–µ–¥–∞–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å SentryShot
              />
          )}

          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ */}
          {camera?.isArchiveMode && camera.archiveStartDate && (
              <>
                <div className="archive-indicator">
              <span className="archive-badge">
                –ê—Ä—Ö–∏–≤: {formatDate(camera.archiveStartDate)} - {formatDate(camera.archiveEndDate)}
              </span>
                </div>
                <button
                    className="exit-archive-mode"
                    onClick={handleExitArchiveMode}
                >
                  –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä—è–º–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
                </button>
              </>
          )}

          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */}
          {!isCameraOffline && showControls && (
              <div className="stream-quality-indicator">
                <div className="quality-bars">
                  <div className="quality-bar active"></div>
                  <div className="quality-bar active"></div>
                  <div className="quality-bar"></div>
                  <div className="quality-bar"></div>
                </div>
              </div>
          )}
        </div>
      </div>
  );
};

export default CameraView;