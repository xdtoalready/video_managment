import React, { useState, useRef, useEffect } from 'react';
import { useStore } from '../../store/useStore';
import { Account } from '../../api/sentryshot';
import AccountModal from './AccountModal';
import './AccountDropdown.css';

interface AccountDropdownProps {
  isOpen: boolean;
  onClose: () => void;
  triggerRef: React.RefObject<HTMLElement>;
}

const AccountDropdown: React.FC<AccountDropdownProps> = ({ isOpen, onClose, triggerRef }) => {
  const { 
    accounts, 
    username, 
    hasAdminRights, 
    switchAccount, 
    deleteAccount,
    logout 
  } = useStore();

  const dropdownRef = useRef<HTMLDivElement>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const [isAccountModalOpen, setIsAccountModalOpen] = useState(false);
  const [editingAccount, setEditingAccount] = useState<Account | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
  const [switchingToAccount, setSwitchingToAccount] = useState<string | null>(null);
  const [switchPassword, setSwitchPassword] = useState('');
  const [switchError, setSwitchError] = useState<string | null>(null);

  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ dropdown
  const [dropdownStyle, setDropdownStyle] = useState<React.CSSProperties>({});

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    if (isOpen && triggerRef.current && dropdownRef.current) {
      const updatePosition = () => {
        const triggerRect = triggerRef.current!.getBoundingClientRect();
        const dropdownElement = dropdownRef.current!;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã viewport
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã dropdown (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º –¥–æ —Ä–µ–Ω–¥–µ—Ä–∞, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º)
        const dropdownWidth = 300; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∏–∑ CSS
        const dropdownHeight = Math.min(400, viewportHeight * 0.8); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        
        let top: number;
        let left: number;
        let right: number | undefined;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ dropdown —Å–≤–µ—Ä—Ö—É –∏–ª–∏ —Å–Ω–∏–∑—É
        const spaceBelow = viewportHeight - triggerRect.bottom;
        const spaceAbove = triggerRect.top;
        
        if (spaceBelow >= dropdownHeight || spaceBelow >= spaceAbove) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–∏–∑—É
          top = triggerRect.bottom + 8;
        } else {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–µ—Ä—Ö—É
          top = triggerRect.top - dropdownHeight - 8;
          // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
          if (top < 8) {
            top = 8;
          }
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        const spaceRight = viewportWidth - triggerRect.left;
        const spaceLeft = triggerRect.right;
        
        if (spaceRight >= dropdownWidth) {
          // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é trigger —ç–ª–µ–º–µ–Ω—Ç–∞
          left = triggerRect.left;
          right = undefined;
        } else if (spaceLeft >= dropdownWidth) {
          // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é trigger —ç–ª–µ–º–µ–Ω—Ç–∞
          left = triggerRect.right - dropdownWidth;
          right = undefined;
        } else {
          // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∏ —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é —ç–∫—Ä–∞–Ω–∞
          left = 0;
          right = 16; // 16px –æ—Ç—Å—Ç—É–ø –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
        }
        
        setDropdownStyle({
          top: `${top}px`,
          left: right === undefined ? `${left}px` : undefined,
          right: right !== undefined ? `${right}px` : undefined,
        });
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—Ä–∞–∑—É –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
      updatePosition();
      
      const handleResize = () => updatePosition();
      window.addEventListener('resize', handleResize);
      
      return () => {
        window.removeEventListener('resize', handleResize);
      };
    }
  }, [isOpen, triggerRef]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–µ–Ω—é
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        isOpen &&
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node) &&
        triggerRef.current &&
        !triggerRef.current.contains(event.target as Node)
      ) {
        onClose();
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [isOpen, onClose, triggerRef]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
  useEffect(() => {
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape' && isOpen) {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isOpen, onClose]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
  const handleCreateAccount = () => {
    setEditingAccount(null);
    setIsAccountModalOpen(true);
    onClose(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
  const handleEditAccount = (account: Account) => {
    setEditingAccount(account);
    setIsAccountModalOpen(true);
    onClose(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
  const handleDeleteAccount = async (account: Account) => {
    if (account.username === username) {
      alert('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç');
      return;
    }

    const confirmDelete = window.confirm(
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç "${account.username}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`
    );

    if (!confirmDelete) return;

    try {
      const success = await deleteAccount(account.id);
      if (success) {
        console.log(`–ê–∫–∫–∞—É–Ω—Ç ${account.username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
      alert(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
  const handleStartSwitching = (account: Account) => {
    if (account.username === username) {
      return; // –£–∂–µ —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
    }

    setSwitchingToAccount(account.username);
    setSwitchPassword('');
    setSwitchError(null);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
  const handleCancelSwitching = () => {
    setSwitchingToAccount(null);
    setSwitchPassword('');
    setSwitchError(null);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
  const handleConfirmSwitch = async () => {
    if (!switchingToAccount || !switchPassword) return;

    try {
      const success = await switchAccount(switchingToAccount, switchPassword);
      
      if (success) {
        setSwitchingToAccount(null);
        setSwitchPassword('');
        setSwitchError(null);
        onClose();
        console.log(`–£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: ${switchingToAccount}`);
      } else {
        setSwitchError('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
      setSwitchError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞
  const handleLogout = () => {
    logout();
    onClose();
  };

  if (!isOpen) return null;

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã (—É–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)
  const otherAccounts = accounts.filter(acc => acc.username !== username);

  return (
    <>
      <div 
        ref={dropdownRef}
        className="account-dropdown"
        style={dropdownStyle}
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="account-dropdown-header">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        </div>

        {/* –¢–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç */}
        <div className="account-dropdown-current">
          <div className="current-user-label">
            –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
          </div>
          <div className="current-user-info">
            <div className="current-user-details">
              <div className="username">{username}</div>
              <div className="role">
                {hasAdminRights ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
              </div>
            </div>
            <div className="current-user-icon">
              {hasAdminRights ? 'üëë' : 'üë§'}
            </div>
          </div>
        </div>

        {/* –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ */}
        {switchingToAccount ? (
          <div className="account-switch-form">
            <div className="switch-form-title">
              –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞: <strong>{switchingToAccount}</strong>
            </div>
            <input
              type="password"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              value={switchPassword}
              onChange={(e) => setSwitchPassword(e.target.value)}
              className="switch-password-input"
              autoFocus
              onKeyPress={(e) => {
                if (e.key === 'Enter') {
                  handleConfirmSwitch();
                }
              }}
            />
            {switchError && (
              <div className="switch-error">
                {switchError}
              </div>
            )}
            <div className="switch-form-actions">
              <button
                onClick={handleCancelSwitching}
                className="switch-btn switch-btn-cancel"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleConfirmSwitch}
                disabled={!switchPassword}
                className="switch-btn switch-btn-confirm"
              >
                –í–æ–π—Ç–∏
              </button>
            </div>
          </div>
        ) : (
          <>
            {/* –°–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ */}
            {otherAccounts.length > 0 && (
              <div className="account-dropdown-section">
                <div className="section-label">
                  –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞:
                </div>
                {otherAccounts.map(account => (
                  <div
                    key={account.id}
                    className="account-item"
                    onClick={() => handleStartSwitching(account)}
                  >
                    <div className="account-item-info">
                      <span className="account-item-icon">
                        {account.isAdmin ? 'üëë' : 'üë§'}
                      </span>
                      <div className="account-item-details">
                        <div className="username">{account.username}</div>
                        <div className="role">
                          {account.isAdmin ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                        </div>
                      </div>
                    </div>
                    {hasAdminRights && (
                      <div className="account-item-actions">
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            handleEditAccount(account);
                          }}
                          className="account-action-btn"
                          title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                        >
                          ‚úé
                        </button>
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDeleteAccount(account);
                          }}
                          className="account-action-btn delete"
                          title="–£–¥–∞–ª–∏—Ç—å"
                        >
                          √ó
                        </button>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}

            {/* –î–µ–π—Å—Ç–≤–∏—è */}
            <div className="account-dropdown-actions">
              {hasAdminRights && (
                <div
                  className="dropdown-action-item create"
                  onClick={handleCreateAccount}
                >
                  <span>+</span>
                  –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                </div>
              )}

              <div
                className="dropdown-action-item logout"
                onClick={handleLogout}
              >
                <span>üö™</span>
                –í—ã–π—Ç–∏
              </div>
            </div>
          </>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ */}
      {isAccountModalOpen && (
        <AccountModal
          isOpen={isAccountModalOpen}
          onClose={() => {
            setIsAccountModalOpen(false);
            setEditingAccount(null);
          }}
          editingAccount={editingAccount}
        />
      )}
    </>
  );
};

export default AccountDropdown;