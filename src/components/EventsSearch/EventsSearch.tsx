import React, { useState, useEffect } from 'react';
import { useStore, TimelineEvent, EventType } from '../../store/useStore.ts';
import './EventsSearch.css';

interface EventsSearchProps {
    onSelectEvent: (time: Date) => void;
}

const EventsSearch: React.FC<EventsSearchProps> = ({ onSelectEvent }) => {
    const {
        activeRecording,
        timelineEvents,
        fetchTimelineEvents
    } = useStore();

    const [searchTerm, setSearchTerm] = useState('');
    const [selectedTypes, setSelectedTypes] = useState<EventType[]>(['motion', 'sound', 'object', 'alarm', 'custom']);
    const [dateRange, setDateRange] = useState<{start: Date | null, end: Date | null}>({
        start: null,
        end: null
    });
    const [searchResults, setSearchResults] = useState<TimelineEvent[]>([]);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        if (activeRecording) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const end = new Date();
            const start = new Date(end.getTime() - 24 * 60 * 60 * 1000);

            fetchTimelineEvents(activeRecording.id, { start, end });
        }
    }, [activeRecording?.id, fetchTimelineEvents]);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    useEffect(() => {
        if (!activeRecording) {
            setSearchResults([]);
            return;
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞–º–µ—Ä—ã
        let filteredEvents = timelineEvents.filter(event =>
            event.monitorId === activeRecording.id
        );

        // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
        if (selectedTypes.length > 0) {
            filteredEvents = filteredEvents.filter(event =>
                selectedTypes.includes(event.type as EventType)
            );
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–∏—Å–∫—É
        if (searchTerm.trim()) {
            const term = searchTerm.toLowerCase();
            filteredEvents = filteredEvents.filter(event =>
                event.label.toLowerCase().includes(term)
            );
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
        if (dateRange.start) {
            filteredEvents = filteredEvents.filter(event =>
                event.timestamp >= dateRange.start!
            );
        }

        if (dateRange.end) {
            filteredEvents = filteredEvents.filter(event =>
                event.timestamp <= dateRange.end!
            );
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
        filteredEvents.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());

        setSearchResults(filteredEvents);
    }, [
        activeRecording?.id,
        timelineEvents,
        searchTerm,
        selectedTypes,
        dateRange.start,
        dateRange.end
    ]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    const handleTypeToggle = (type: EventType) => {
        setSelectedTypes(prev => {
            if (prev.includes(type)) {
                return prev.filter(t => t !== type);
            } else {
                return [...prev, type];
            }
        });
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
    const handleStartDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.target.value;
        if (value) {
            setDateRange(prev => ({
                ...prev,
                start: new Date(value)
            }));
        } else {
            setDateRange(prev => ({
                ...prev,
                start: null
            }));
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
    const handleEndDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.target.value;
        if (value) {
            setDateRange(prev => ({
                ...prev,
                end: new Date(value)
            }));
        } else {
            setDateRange(prev => ({
                ...prev,
                end: null
            }));
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å–æ–±—ã—Ç–∏—é
    const handleEventClick = (timestamp: Date) => {
        onSelectEvent(timestamp);
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    const formatDateTime = (date: Date) => {
        return date.toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è input type="datetime-local"
    const formatDateForInput = (date: Date) => {
        return date.toISOString().slice(0, 16);
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    const getEventTypeIcon = (type: string) => {
        switch (type) {
            case 'motion':
                return 'üèÉ';
            case 'sound':
                return 'üîä';
            case 'object':
                return 'üë§';
            case 'alarm':
                return 'üö®';
            case 'custom':
                return 'üîñ';
            default:
                return 'üìå';
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    const getEventTypeName = (type: string) => {
        switch (type) {
            case 'motion':
                return '–î–≤–∏–∂–µ–Ω–∏–µ';
            case 'sound':
                return '–ó–≤—É–∫';
            case 'object':
                return '–û–±—ä–µ–∫—Ç';
            case 'alarm':
                return '–¢—Ä–µ–≤–æ–≥–∞';
            case 'custom':
                return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ';
            default:
                return type;
        }
    };

    return (
        <div className="events-search">
            <h3 className="events-search-title">–ü–æ–∏—Å–∫ –ø–æ —Å–æ–±—ã—Ç–∏—è–º</h3>

            <div className="search-filters">
                {/* –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ */}
                <div className="search-input-container">
                    <input
                        type="text"
                        className="search-input"
                        placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏—è..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                    />
                </div>

                {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π */}
                <div className="event-types-filter">
                    <div className="filter-label">–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π:</div>
                    <div className="event-type-buttons">
                        <button
                            className={`event-type-button ${selectedTypes.includes('motion') ? 'active' : ''}`}
                            onClick={() => handleTypeToggle('motion')}
                            title="–î–≤–∏–∂–µ–Ω–∏–µ"
                        >
                            üèÉ
                        </button>
                        <button
                            className={`event-type-button ${selectedTypes.includes('sound') ? 'active' : ''}`}
                            onClick={() => handleTypeToggle('sound')}
                            title="–ó–≤—É–∫"
                        >
                            üîä
                        </button>
                        <button
                            className={`event-type-button ${selectedTypes.includes('object') ? 'active' : ''}`}
                            onClick={() => handleTypeToggle('object')}
                            title="–û–±—ä–µ–∫—Ç"
                        >
                            üë§
                        </button>
                        <button
                            className={`event-type-button ${selectedTypes.includes('alarm') ? 'active' : ''}`}
                            onClick={() => handleTypeToggle('alarm')}
                            title="–¢—Ä–µ–≤–æ–≥–∞"
                        >
                            üö®
                        </button>
                        <button
                            className={`event-type-button ${selectedTypes.includes('custom') ? 'active' : ''}`}
                            onClick={() => handleTypeToggle('custom')}
                            title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ"
                        >
                            üîñ
                        </button>
                    </div>
                </div>

                {/* –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É */}
                <div className="date-range-filter">
                    <div className="filter-label">–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:</div>
                    <div className="date-inputs">
                        <div className="date-input-group">
                            <label>–û—Ç:</label>
                            <input
                                type="datetime-local"
                                value={dateRange.start ? formatDateForInput(dateRange.start) : ''}
                                onChange={handleStartDateChange}
                            />
                        </div>
                        <div className="date-input-group">
                            <label>–î–æ:</label>
                            <input
                                type="datetime-local"
                                value={dateRange.end ? formatDateForInput(dateRange.end) : ''}
                                onChange={handleEndDateChange}
                            />
                        </div>
                    </div>
                </div>
            </div>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
            <div className="search-results">
                <div className="results-header">
          <span className="results-count">
            {searchResults.length === 0 ? '–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π' : `–ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${searchResults.length}`}
          </span>
                </div>

                {searchResults.length > 0 && (
                    <ul className="events-list">
                        {searchResults.map(event => (
                            <li
                                key={event.id}
                                className={`event-item event-type-${event.type}`}
                                onClick={() => handleEventClick(event.timestamp)}
                            >
                                <div className="event-icon">{getEventTypeIcon(event.type)}</div>
                                <div className="event-content">
                                    <div className="event-header">
                                        <span className="event-label">{event.label}</span>
                                        <span className="event-type-badge">{getEventTypeName(event.type)}</span>
                                    </div>
                                    <div className="event-time">{formatDateTime(event.timestamp)}</div>
                                </div>
                            </li>
                        ))}
                    </ul>
                )}
            </div>
        </div>
    );
};

export default EventsSearch;