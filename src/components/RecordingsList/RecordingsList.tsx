// src/components/RecordingsList/RecordingsList.tsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import React, { useEffect, useState } from 'react';
import { useStore, Recording } from '../../store/useStore.ts';
import './RecordingsList.css';
import { sentryshotAPI } from '../../api/sentryshot';
import { safeFormatDate } from "../../utils/recordingHelpers.ts";

const RecordingsList: React.FC = () => {
  const {
    recordings,
    loadRecordings,
    selectRecording,
    archiveFilters,
    cameras,
    connectionStatus,
    getLocationCategoryName
  } = useStore();

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ isLoading - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ store
  const [error, setError] = useState<string | null>(null);

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω–æ–π –≤—ã–∑–æ–≤ loadRecordings
  // useEffect —É–±—Ä–∞–Ω - –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ ArchiveView

  // üî• –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('üìä [RecordingsList] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:', {
      recordingsCount: recordings.length,
      connectionStatus,
      archiveFilters: {
        cameras: archiveFilters.cameras.length,
        locations: archiveFilters.locations.length,
        dateRange: {
          start: archiveFilters.dateRange.start.toISOString(),
          end: archiveFilters.dateRange.end.toISOString()
        }
      }
    });

    if (recordings.length > 0) {
      console.log('üìä [RecordingsList] –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ:', 
        recordings.slice(0, 3).map(r => ({
          id: r.id,
          monitorName: r.monitorName,
          startTime: r.startTime.toISOString()
        }))
      );
    }
  }, [recordings, connectionStatus, archiveFilters]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
  useEffect(() => {
    if (connectionStatus === 'error') {
      setError('–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º SentryShot');
    } else {
      setError(null);
    }
  }, [connectionStatus]);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (date: Date): string => {
    return date.toLocaleString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏
  const generateFileName = (recording: Recording): string => {
    const startTimeStr = recording.startTime.toISOString().replace(/[:.]/g, '-');
    return `${recording.monitorId}_${startTimeStr}`;
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const formatDuration = (duration: number): string => {
    const minutes = Math.floor(duration / 60);
    const seconds = Math.floor(duration % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–∞–º–µ—Ä—ã –ø–æ ID
  const getCameraName = (monitorId: string): string => {
    const camera = cameras.find(cam => cam.id === monitorId);
    return camera ? camera.name : `–ö–∞–º–µ—Ä–∞ ${monitorId}`;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∑–∞–ø–∏—Å–∏
  const handleRecordingClick = (recording: Recording) => {
    console.log('üì∫ [RecordingsList] –í—ã–±—Ä–∞–Ω–∞ –∑–∞–ø–∏—Å—å:', recording.id);
    selectRecording(recording.id);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
  const refreshRecordings = async () => {
    console.log('üîÑ [RecordingsList] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π...');
    setError(null);

    try {
      await loadRecordings();
      console.log('‚úÖ [RecordingsList] –ó–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (err) {
      console.error('‚ùå [RecordingsList] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏');
    }
  };

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
  const handleDownloadRecording = async (recording: Recording, e: React.MouseEvent) => {
    e.stopPropagation();

    try {
      console.log('‚¨áÔ∏è [RecordingsList] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏:', recording.id);
      
      const downloadUrl = sentryshotAPI.getVodUrl(
        recording.monitorId,
        recording.startTime,
        recording.endTime
      );
      
      const link = document.createElement('a');
      link.href = downloadUrl;
      link.download = `${generateFileName(recording)}.mp4`;
      
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      console.log('‚úÖ [RecordingsList] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ:', downloadUrl);
    } catch (error) {
      console.error('‚ùå [RecordingsList] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø–∏—Å–µ–π
  const getRecordingsStats = () => {
    if (!recordings.length) return null;

    const totalDuration = recordings.reduce((sum, rec) => sum + rec.duration, 0);
    const totalSize = recordings.reduce((sum, rec) => sum + (rec.fileSize || 0), 0);
    const avgDuration = totalDuration / recordings.length;

    return {
      count: recordings.length,
      totalDuration,
      totalSize,
      avgDuration
    };
  };

  const stats = getRecordingsStats();

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º connectionStatus –∏–∑ store –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  const isLoading = connectionStatus === 'connecting';

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (isLoading && recordings.length === 0) {
    return (
      <div className="recordings-list-container">
        <div className="recordings-header">
          <h2>–ê—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏</h2>
        </div>
        <div className="recordings-loading">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π...</p>
          <small>–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ SentryShot</small>
          
          <div className="loading-details">
            <div>–ü–µ—Ä–∏–æ–¥: {archiveFilters.dateRange.start.toLocaleDateString()} - {archiveFilters.dateRange.end.toLocaleDateString()}</div>
            {archiveFilters.cameras.length > 0 && (
              <div>–ö–∞–º–µ—Ä—ã: {archiveFilters.cameras.length} –≤—ã–±—Ä–∞–Ω–æ</div>
            )}
            {archiveFilters.locations.length > 0 && (
              <div>–õ–æ–∫–∞—Ü–∏–∏: {archiveFilters.locations.map(loc => getLocationCategoryName(loc)).join(', ')}</div>
            )}
          </div>
        </div>
      </div>
    );
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
  if (error && !isLoading) {
    return (
      <div className="recordings-list-container">
        <div className="recordings-header">
          <h2>–ê—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏</h2>
          <button className="refresh-button" onClick={refreshRecordings}>
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
        <div className="recordings-error">
          <div className="error-icon">‚ö†Ô∏è</div>
          <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
          <p>{error}</p>
          <div className="error-actions">
            <button onClick={refreshRecordings} className="retry-button">
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
          
          <div className="error-details">
            <h4>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:</h4>
            <ul>
              <li>–ü–µ—Ä–∏–æ–¥: {archiveFilters.dateRange.start.toLocaleDateString()} - {archiveFilters.dateRange.end.toLocaleDateString()}</li>
              <li>–ö–∞–º–µ—Ä—ã: {archiveFilters.cameras.length > 0 ? `${archiveFilters.cameras.length} –≤—ã–±—Ä–∞–Ω–æ` : '–í—Å–µ'}</li>
              <li>–õ–æ–∫–∞—Ü–∏–∏: {archiveFilters.locations.length > 0 ? archiveFilters.locations.map(loc => getLocationCategoryName(loc)).join(', ') : '–í—Å–µ'}</li>
            </ul>
          </div>
        </div>
      </div>
    );
  }

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ß–µ—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (recordings.length === 0 && !isLoading) {
    return (
      <div className="recordings-list-container">
        <div className="recordings-header">
          <h2>–ê—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏</h2>
          <button className="refresh-button" onClick={refreshRecordings}>
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
        <div className="recordings-empty">
          <h3>–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p>–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.</p>
          
          <div className="empty-suggestions">
            <h4>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</h4>
            <ul>
              <li>–í –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∫–∞–º–µ—Ä—ã –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏ –≤–∏–¥–µ–æ</li>
              <li>–ó–∞–ø–∏—Å—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–º–µ—Ä</li>
              <li>–§–∞–π–ª—ã –∑–∞–ø–∏—Å–µ–π –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞</li>
              <li>–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∞—Ä—Ö–∏–≤—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ</li>
            </ul>
          </div>

          <div className="current-filters">
            <h4>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</h4>
            <div>–ü–µ—Ä–∏–æ–¥: {archiveFilters.dateRange.start.toLocaleDateString()} - {archiveFilters.dateRange.end.toLocaleDateString()}</div>
            <div>–ö–∞–º–µ—Ä—ã: {archiveFilters.cameras.length > 0 ? `${archiveFilters.cameras.length} –≤—ã–±—Ä–∞–Ω–æ (${archiveFilters.cameras.join(', ')})` : '–í—Å–µ'}</div>
            <div>–õ–æ–∫–∞—Ü–∏–∏: {archiveFilters.locations.length > 0 ? archiveFilters.locations.map(loc => getLocationCategoryName(loc)).join(', ') : '–í—Å–µ'}</div>
          </div>
        </div>
      </div>
    );
  }

  // üî• –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
  console.log('üìä [RecordingsList] –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–ø–∏—Å–∏:', recordings.length);

  return (
    <div className="recordings-list-container">
      <div className="recordings-header">
        <h2>–ê—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ ({recordings.length})</h2>
        <div className="recordings-actions">
          <button 
            className="refresh-button" 
            onClick={refreshRecordings} 
            disabled={isLoading}
            title="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π"
          >
            {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
          </button>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {stats && (
        <div className="recordings-stats">
          <div className="stats-item">
            <span className="stats-label">–ó–∞–ø–∏—Å–µ–π –Ω–∞–π–¥–µ–Ω–æ</span>
            <span className="stats-value">{stats.count}</span>
          </div>
          <div className="stats-item">
            <span className="stats-label">–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</span>
            <span className="stats-value">{Math.round(stats.totalDuration / 60)} –º–∏–Ω</span>
          </div>
          <div className="stats-item">
            <span className="stats-label">–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</span>
            <span className="stats-value">{Math.round(stats.avgDuration / 60)} –º–∏–Ω</span>
          </div>
        </div>
      )}

      {/* –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π */}
      <div className="recordings-table">
        <div className="recordings-table-header">
          <div className="recording-cell">–î–∞—Ç–∞</div>
          <div className="recording-cell">–ù–∞—á–∞–ª–æ</div>
          <div className="recording-cell">–ö–æ–Ω–µ—Ü</div>
          <div className="recording-cell">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>
          <div className="recording-cell">–ö–∞–º–µ—Ä–∞</div>
          <div className="recording-cell">–õ–æ–∫–∞—Ü–∏—è</div>
          <div className="recording-cell">–î–µ–π—Å—Ç–≤–∏—è</div>
        </div>

        <div className="recordings-table-body">
          {recordings.map(recording => (
            <div
              key={recording.id}
              className="recording-row"
              onClick={() => handleRecordingClick(recording)}
              title={`–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–∏ ${recording.monitorName}`}
            >
              <div className="recording-cell">
                {safeFormatDate(recording.startTime)}
              </div>
              <div className="recording-cell">
                {formatTime(recording.startTime)}
              </div>
              <div className="recording-cell">
                {formatTime(recording.endTime)}
              </div>
              <div className="recording-cell">
                {formatDuration(recording.duration)}
              </div>
              <div className="recording-cell">
                <span className="camera-name">{getCameraName(recording.monitorId)}</span>
                <small className="monitor-id">ID: {recording.monitorId}</small>
              </div>
              <div className="recording-cell">
                {getLocationCategoryName(recording.location)}
              </div>
              <div className="recording-cell recording-actions">
                <button
                  className="recording-action-btn play"
                  onClick={(e) => {
                    e.stopPropagation();
                    selectRecording(recording.id);
                  }}
                  title="–°–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å"
                >
                  –°–º–æ—Ç—Ä–µ—Ç—å
                </button>
                <button
                  className="recording-action-btn download"
                  onClick={(e) => handleDownloadRecording(recording, e)}
                  title="–°–∫–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"
                  disabled={isLoading}
                >
                  –°–∫–∞—á–∞—Ç—å
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="recordings-summary">
        <div className="summary-item">
          <span className="summary-label">–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ñ–∏–ª—å—Ç—Ä–∞:</span>
          <span className="summary-value">
            {archiveFilters.dateRange.start.toLocaleDateString('ru-RU')} ‚Äî {archiveFilters.dateRange.end.toLocaleDateString('ru-RU')}
          </span>
        </div>
        
        {recordings.length > 0 && stats && (
          <div className="summary-item">
            <span className="summary-label">–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞–ø–∏—Å–µ–π:</span>
            <span className="summary-value">
              {recordings[recordings.length - 1].startTime.toLocaleDateString('ru-RU')} ‚Äî {recordings[0].endTime.toLocaleDateString('ru-RU')}
            </span>
          </div>
        )}

        {archiveFilters.cameras.length > 0 && (
          <div className="summary-item">
            <span className="summary-label">–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞–º–µ—Ä–∞–º:</span>
            <span className="summary-value">{archiveFilters.cameras.length} –≤—ã–±—Ä–∞–Ω–æ</span>
          </div>
        )}

        {archiveFilters.locations.length > 0 && (
          <div className="summary-item">
            <span className="summary-label">–§–∏–ª—å—Ç—Ä –ø–æ –ª–æ–∫–∞—Ü–∏—è–º:</span>
            <span className="summary-value">
              {archiveFilters.locations.map(loc => getLocationCategoryName(loc)).join(', ')}
            </span>
          </div>
        )}
      </div>

      {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º */}
      {connectionStatus === 'error' && (
        <div className="connection-status-warning">
          <span className="warning-icon">‚ö†Ô∏è</span>
          <span>–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.</span>
          <button onClick={refreshRecordings} className="retry-connection-btn">
            –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
          </button>
        </div>
      )}
    </div>
  );
};

export default RecordingsList;