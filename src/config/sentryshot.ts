// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SentryShot
export interface SentryShotConfig {
    // URL —Å–µ—Ä–≤–µ—Ä–∞ SentryShot
    serverUrl: string;

    // –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–æ–±—ã—á–Ω–æ 2020 –¥–ª—è HTTP, 2021 –¥–ª—è HTTPS)
    port: number;

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ HTTPS
    useHttps: boolean;

    // –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    auth: {
        username: string;
        password: string;
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
    streaming: {
        // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å –Ω–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
        preferLowRes: boolean;

        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –±—É—Ñ–µ—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        maxBufferLength: number;

        // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        connectionTimeout: number;

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        retryAttempts: number;
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    archive: {
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥–Ω—è—Ö
        maxRangeDays: number;

        // –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pageSize: number;

        // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ VOD –∑–∞–ø—Ä–æ—Å–æ–≤
        enableCaching: boolean;
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
    api: {
        // –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        timeout: number;

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
        autoRefreshToken: boolean;

        // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
        tokenRefreshInterval: number;
    };
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export const defaultConfig: SentryShotConfig = {
    serverUrl: window.location.hostname || 'localhost',
    port: window.location.port ? parseInt(window.location.port) : 2020,
    useHttps: window.location.protocol === 'https:',

    auth: {
        username: '', // –ë—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
        password: ''  // –ë—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
    },

    streaming: {
        preferLowRes: false,
        maxBufferLength: 30,
        connectionTimeout: 10000,
        retryAttempts: 3
    },

    archive: {
        maxRangeDays: 30,
        pageSize: 50,
        enableCaching: true
    },

    api: {
        timeout: 30000,
        autoRefreshToken: true,
        tokenRefreshInterval: 25 // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 25 –º–∏–Ω—É—Ç (—Ç–æ–∫–µ–Ω –∂–∏–≤–µ—Ç 30 –º–∏–Ω—É—Ç)
    }
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
export const developmentConfig: SentryShotConfig = {
    ...defaultConfig,
    serverUrl: 'localhost',
    port: 2020,
    useHttps: false,

    streaming: {
        ...defaultConfig.streaming,
        preferLowRes: false,
        maxBufferLength: 10,
        retryAttempts: 1
    },

    api: {
        ...defaultConfig.api,
        timeout: 10000 // –ö–æ—Ä–æ—á–µ —Ç–∞–π–º–∞—É—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    }
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
export const productionConfig: SentryShotConfig = {
    ...defaultConfig,
    useHttps: true,
    port: 2021, // HTTPS –ø–æ—Ä—Ç

    streaming: {
        ...defaultConfig.streaming,
        maxBufferLength: 60, // –ë–æ–ª—å—à–∏–π –±—É—Ñ–µ—Ä –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        retryAttempts: 5
    },

    archive: {
        ...defaultConfig.archive,
        pageSize: 100 // –ë–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    }
};

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
export class SentryShotConfigManager {
    private static instance: SentryShotConfigManager;
    private config: SentryShotConfig;

    private constructor() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const isDevelopment = process.env.NODE_ENV === 'development' ||
            window.location.hostname === 'localhost' ||
            window.location.hostname === '127.0.0.1';

        this.config = isDevelopment ? developmentConfig : productionConfig;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ localStorage
        this.loadSavedConfig();
    }

    public static getInstance(): SentryShotConfigManager {
        if (!SentryShotConfigManager.instance) {
            SentryShotConfigManager.instance = new SentryShotConfigManager();
        }
        return SentryShotConfigManager.instance;
    }

    public getConfig(): SentryShotConfig {
        return { ...this.config };
    }

    public updateConfig(updates: Partial<SentryShotConfig>): void {
        this.config = { ...this.config, ...updates };
        this.saveConfig();
    }

    public updateAuth(username: string, password: string): void {
        this.config.auth = { username, password };
        this.saveConfig();
    }

    public clearAuth(): void {
        this.config.auth = { username: '', password: '' };
        this.saveConfig();
    }

    public getBaseUrl(): string {
        if (typeof window !== 'undefined') {
            const currentOrigin = window.location.origin;
            return currentOrigin;
        }

        // Fallback –¥–ª—è SSR
        const protocol = this.config.useHttps ? 'https' : 'http';
        return `${protocol}://${this.config.serverUrl}`;
    }

    public getStreamUrl(monitorId: string): string {
        return `${this.getBaseUrl()}/stream/${monitorId}/index.m3u8`;
    }

    public getHlsUrl(monitorId: string): string {
        return `${this.getBaseUrl()}/hls/${monitorId}/index.m3u8`;
    }

    public isDockerMode(): boolean {
        if (typeof window === 'undefined') return false;
        
        // –ï—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (80/443), –∑–Ω–∞—á–∏—Ç —ç—Ç–æ dev —Ä–µ–∂–∏–º
        const isStandardPort = window.location.port === '' || 
                                window.location.port === '80' || 
                                window.location.port === '443';
        
        // –í Docker —á–µ—Ä–µ–∑ nginx –ø–æ—Ä—Ç –±—É–¥–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º
        return isStandardPort && window.location.hostname !== 'localhost';
    }

    public getApiUrl(endpoint: string): string {
        const cleanEndpoint = endpoint.startsWith('/') ? endpoint : '/' + endpoint;
        return `${this.getBaseUrl()}/api${cleanEndpoint}`;
    }

    public getVodUrl(monitorId: string, startTime: Date, endTime: Date, cacheId?: string | number): string {
        const startNano = startTime.getTime() * 1000000;
        const endNano = endTime.getTime() * 1000000;
        
        let cacheIdNumber: number;
        
        if (typeof cacheId === 'number') {
            cacheIdNumber = cacheId;
        } else if (typeof cacheId === 'string') {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp
            const extractedNumber = cacheId.match(/\d+/);
            cacheIdNumber = extractedNumber ? parseInt(extractedNumber[0], 10) : Date.now();
        } else {
            cacheIdNumber = Date.now();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if (isNaN(cacheIdNumber)) {
            cacheIdNumber = Date.now();
        }

        console.log('üé¨ [SentryShot Config] –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ VOD URL:', {
            monitorId,
            startTime: startTime.toISOString(),
            endTime: endTime.toISOString(),
            startNano,
            endNano,
            originalCacheId: cacheId,
            finalCacheId: cacheIdNumber
        });

        const vodUrl = `${this.getBaseUrl()}/vod/vod.mp4?monitor-id=${monitorId}&start=${startNano}&end=${endNano}&cache-id=${cacheIdNumber}`;
        
        return vodUrl;
    }

    public getAuthHeader(): string {
        const { username, password } = this.config.auth;
        if (!username || !password) {
            throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        }

        return 'Basic ' + btoa(`${username}:${password}`);
    }

    public isAuthenticated(): boolean {
        return !!(this.config.auth.username && this.config.auth.password);
    }

    private saveConfig(): void {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ –ø–∞—Ä–æ–ª–µ–π –≤ localStorage
            const configToSave = {
                ...this.config,
                auth: {
                    username: this.config.auth.username,
                    password: '' // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤ localStorage –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                }
            };

            localStorage.setItem('sentryshot_config', JSON.stringify(configToSave));
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:', error);
        }
    }

    private loadSavedConfig(): void {
        try {
            const saved = localStorage.getItem('sentryshot_config');
            if (saved) {
                const savedConfig = JSON.parse(saved);
                this.config = { ...this.config, ...savedConfig };
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:', error);
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    public validateConfig(): { isValid: boolean; errors: string[] } {
        const errors: string[] = [];

        if (!this.config.serverUrl) {
            errors.push('–ù–µ —É–∫–∞–∑–∞–Ω URL —Å–µ—Ä–≤–µ—Ä–∞');
        }

        if (!this.config.port || this.config.port < 1 || this.config.port > 65535) {
            errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }

        if (!this.config.auth.username) {
            errors.push('–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }

        if (!this.config.auth.password) {
            errors.push('–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–æ–ª—å');
        }

        return {
            isValid: errors.length === 0,
            errors
        };
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    public async testConnection(): Promise<{ success: boolean; error?: string }> {
        try {
            const response = await fetch(this.getApiUrl('/monitors'), {
                method: 'GET',
                headers: {
                    'Authorization': this.getAuthHeader()
                },
                signal: AbortSignal.timeout(this.config.api.timeout)
            });

            if (response.ok) {
                return { success: true };
            } else {
                return {
                    success: false,
                    error: `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`
                };
            }
        } catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
            };
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const sentryShotConfig = SentryShotConfigManager.getInstance();