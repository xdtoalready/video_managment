import React, { useEffect, useState, useRef } from 'react'
import './App.css'
import CameraGrid from './components/Camera/CameraGrid.tsx'
import LoginForm from './components/Auth/LoginForm.tsx'
import Layout from './components/layout/Layout'
import { useStore } from './store/useStore'
import CalendarModal from './components/Calendar/CalendarModal.tsx'
import ArchiveView from './components/ArchiveView/ArchiveView.tsx'
import AccountDropdown from './components/Account/AccountDropdown.tsx'

function App() {
  const {
    isAuthenticated,
    viewMode,
    checkAuthStatus,
    loadCameras,
    connectionStatus,
    isOnline,
    login
  } = useStore();

  const [isInitializing, setIsInitializing] = useState(true);
  const [showPersistentConnection, setShowPersistentConnection] = useState(false);
  const connectingTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
useEffect(() => {
  const initializeApp = async () => {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
      const savedAuth = localStorage.getItem('sentryshot_auth');
      if (savedAuth) {
        try {
          const authData = JSON.parse(savedAuth);
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
          if (Date.now() - authData.timestamp < 24 * 60 * 60 * 1000) {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            const success = await login(authData.username, authData.password);
            if (success) {
              console.log('–°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
            } else {
              console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é');
              localStorage.removeItem('sentryshot_auth');
            }
          } else {
            // –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏
            localStorage.removeItem('sentryshot_auth');
          }
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
          localStorage.removeItem('sentryshot_auth');
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    } finally {
      setIsInitializing(false);
    }
  };

  initializeApp();
}, []); // –ü–£–°–¢–û–ô –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!

  // –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  useEffect(() => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (connectingTimeoutRef.current) {
      clearTimeout(connectingTimeoutRef.current);
      connectingTimeoutRef.current = null;
    }

    if (connectionStatus === 'connecting') {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–ª–æ–∫ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      connectingTimeoutRef.current = setTimeout(() => {
        setShowPersistentConnection(true);
      }, 2000);
    } else if (connectionStatus === 'connected') {
      // –°–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      setShowPersistentConnection(false);
    } else if (connectionStatus === 'error') {
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Å—Ä–∞–∑—É –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∏—Å–µ—Ç—å
      setShowPersistentConnection(true);
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (connectingTimeoutRef.current) {
        clearTimeout(connectingTimeoutRef.current);
      }
    };
  }, [connectionStatus]);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  useEffect(() => {
    if (!isAuthenticated) return;

    const healthCheckInterval = setInterval(async () => {
      if (connectionStatus !== 'connecting') {
        try {
          await checkAuthStatus();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        }
      }
    }, 120000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 –ú–ò–ù–£–¢–´ –≤–º–µ—Å—Ç–æ 30 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(healthCheckInterval);
  }, [isAuthenticated]); // –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  if (isInitializing) {
    return (
        <div className="app-loading">
          <div className="loading-container">
            <div className="loading-spinner-large"></div>
            <h2>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è...</h2>
            <p>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SentryShot</p>
          </div>
        </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ –µ—Å–ª–∏ –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã
  if (!isAuthenticated) {
    return <LoginForm />;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
  const renderConnectionAlert = () => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    if (connectionStatus === 'error' && !isOnline) {
      return (
          <div className="connection-alert error">
            <div className="alert-content">
              <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M10 18C14.4183 18 18 14.4183 18 10C18 5.58172 14.4183 2 10 2C5.58172 2 2 5.58172 2 10C2 14.4183 5.58172 18 10 18Z" stroke="currentColor" strokeWidth="2"/>
                <path d="M10 6V10" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                <path d="M10 14H10.01" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
              </svg>
              <span>–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º SentryShot</span>
              <button onClick={checkAuthStatus} className="retry-button">
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
              </button>
            </div>
          </div>
      );
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–ª–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
    if (showPersistentConnection && (connectionStatus === 'connecting' || connectionStatus === 'error')) {
      return (
          <div className="connection-alert connecting persistent">
            <div className="alert-content">
              <div className="loading-spinner-small"></div>
              <span>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É<span className="loading-dots"></span></span>
              {connectionStatus === 'error' && (
                  <button onClick={checkAuthStatus} className="retry-button-small">
                    –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                  </button>
              )}
            </div>
          </div>
      );
    }

    return null;
  };

  // –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  return (
      <div className="app">
        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        {renderConnectionAlert()}

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <Layout>
          {viewMode === 'online' ? (
              // –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º —Å –ø—Ä—è–º–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–µ–π
              <CameraGrid />
          ) : (
              // –ê—Ä—Ö–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
              <ArchiveView />
          )}

          {/* –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–¥–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è */}
          <CalendarModal />
        </Layout>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤ —Ñ—É—Ç–µ—Ä–µ */}
        <SystemStatusFooter />
      </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
const SystemStatusFooter: React.FC = () => {
  const { connectionStatus, isOnline, lastSync, username, hasAdminRights } = useStore();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  const [isAccountDropdownOpen, setIsAccountDropdownOpen] = useState(false);
  const usernameRef = useRef<HTMLElement>(null);

  const handleUsernameClick = () => {
    setIsAccountDropdownOpen(!isAccountDropdownOpen);
  };

  const formatLastSync = (date: Date | null) => {
    if (!date) return '–ù–∏–∫–æ–≥–¥–∞';

    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const minutes = Math.floor(diff / 60000);

    if (minutes < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (minutes === 1) return '1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥';
    if (minutes < 60) return `${minutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`;

    const hours = Math.floor(minutes / 60);
    if (hours === 1) return '1 —á–∞—Å –Ω–∞–∑–∞–¥';
    if (hours < 24) return `${hours} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥`;

    return date.toLocaleString();
  };

  const getStatusIcon = () => {
    switch (connectionStatus) {
      case 'connected':
        return 'üü¢';
      case 'connecting':
        return 'üü°';
      case 'error':
        return 'üî¥';
      default:
        return '‚ö™';
    }
  };

  return (
      <div className="system-status-footer">
        <div className="status-item">
          <span className="status-icon">{getStatusIcon()}</span>
          <span className="status-text">
          {connectionStatus === 'connected' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' :
              connectionStatus === 'connecting' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' :
                  connectionStatus === 'error' ? '–û—à–∏–±–∫–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
        </span>
        </div>

         <div className="status-item">
            <span className="status-label">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</span>
            <span 
              ref={usernameRef}
              className="status-value username-clickable"
              onClick={handleUsernameClick}
              title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"
              style={{
                cursor: 'pointer',
                padding: '4px 8px',
                borderRadius: '4px',
                transition: 'background-color 0.2s',
                display: 'inline-flex',
                alignItems: 'center',
                gap: '4px'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.background = 'var(--light-bg)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.background = 'transparent';
              }}
            >
              <span>{hasAdminRights ? 'üëë' : 'üë§'}</span>
              <span>{username}</span>
              <span style={{ 
                fontSize: '10px', 
                opacity: 0.7,
                transform: isAccountDropdownOpen ? 'rotate(180deg)' : 'rotate(0deg)',
                transition: 'transform 0.2s'
              }}>
                ‚ñº
                  {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤ */}
                  <AccountDropdown
                    isOpen={isAccountDropdownOpen}
                    onClose={() => setIsAccountDropdownOpen(false)}
                    triggerRef={usernameRef as React.RefObject<HTMLElement>}
                  />
              </span>
            </span>
          </div>

        <div className="status-item">
          <span className="status-label">–û–±–Ω–æ–≤–ª–µ–Ω–æ:</span>
          <span className="status-value">{formatLastSync(lastSync)}</span>
        </div>

        <div className="status-item">
          <span className="status-label">–í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ</span>
          <span className="status-value">v1.0</span>
        </div>

      </div>
  );
};

export default App