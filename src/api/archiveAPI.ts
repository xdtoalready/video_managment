import { LocationType } from '../store/useStore';
import { sentryshotAPI, TimeUtils } from './sentryshot';
import { getLocationForMonitor } from '../constants/locationMapping';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ API
export interface RecordingInfo {
  id: string;
  monitorId: string;
  monitorName: string;
  location: LocationType;
  startTime: Date;
  endTime: Date;
  duration: number;
  fileUrl: string;
  fileSize?: number;
  thumbnailUrl?: string;
}

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
export interface RecordingsSearchParams {
  startDate: Date;
  endDate: Date;
  monitors?: string[];
  locations?: LocationType[];
}

// –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–∞—à–µ–≥–æ API
interface APIRecording {
  state: string;
  id: string;
  data: {
    start: number; // –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥—ã
    end: number;   // –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥—ã
    events: any[];
  };
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π
export interface RecordingStats {
  totalRecordings: number;
  totalDuration: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  averageDuration: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  recordingsSize: number; // –≤ –±–∞–π—Ç–∞—Ö
  period: 'day' | 'week' | 'month';
}

// –°–æ–±—ã—Ç–∏—è –¥–ª—è –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
export interface ArchiveEvent {
  id: string;
  monitorId: string;
  timestamp: Date;
  type: 'motion' | 'object' | 'alarm' | 'custom';
  label: string;
  confidence: number; // 0-100
  duration?: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
  data?: any; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
  color: string; // –¶–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ç–∞–π–º–ª–∞–π–Ω–µ
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ Archive API
export const archiveAPI = {
  // === –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–ü–ò–°–ï–ô ===

   async getRecordings(params: RecordingsSearchParams): Promise<RecordingInfo[]> {

    console.log('üåç [TIMEZONE DEBUG] ==================== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ß–ê–°–û–í–´–• –ü–û–Ø–°–û–í ====================');
console.log('üåç [TIMEZONE DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –≤—Ä–µ–º–µ–Ω–∏:');
console.log('üåç [TIMEZONE DEBUG] –ë—Ä–∞—É–∑–µ—Ä timezone:', Intl.DateTimeFormat().resolvedOptions().timeZone);
console.log('üåç [TIMEZONE DEBUG] –ë—Ä–∞—É–∑–µ—Ä locale:', Intl.DateTimeFormat().resolvedOptions().locale);
console.log('üåç [TIMEZONE DEBUG] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC:', new Date().toISOString());
console.log('üåç [TIMEZONE DEBUG] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–µ—Å—Ç–Ω–æ–µ:', new Date().toLocaleString('ru-RU'));
console.log('üåç [TIMEZONE DEBUG] –°–¥–≤–∏–≥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–º–∏–Ω—É—Ç—ã):', new Date().getTimezoneOffset());
console.log('üåç [TIMEZONE DEBUG] –°–¥–≤–∏–≥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (—á–∞—Å—ã):', new Date().getTimezoneOffset() / 60);

console.log('üåç [TIMEZONE DEBUG] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞:');
console.log('üåç [TIMEZONE DEBUG] startDate UTC:', params.startDate.toISOString());
console.log('üåç [TIMEZONE DEBUG] startDate –º–µ—Å—Ç–Ω–æ–µ:', params.startDate.toLocaleString('ru-RU'));
console.log('üåç [TIMEZONE DEBUG] endDate UTC:', params.endDate.toISOString());
console.log('üåç [TIMEZONE DEBUG] endDate –º–µ—Å—Ç–Ω–æ–µ:', params.endDate.toLocaleString('ru-RU'));
console.log('üåç [TIMEZONE DEBUG] –î–∏–∞–ø–∞–∑–æ–Ω —Ñ–∏–ª—å—Ç—Ä–∞ (—á–∞—Å—ã):', (params.endDate.getTime() - params.startDate.getTime()) / (1000 * 60 * 60));

    try {
      console.log('üé¨ [ARCHIVE] –ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', params);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      const monitors = await sentryshotAPI.getMonitors();
      console.log('üìπ [ARCHIVE] –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—ã:', monitors.map(m => ({id: m.id, name: m.name})));
      
      let filteredMonitors = monitors;

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∞–º
      if (params.monitors?.length) {
        filteredMonitors = monitors.filter(m => params.monitors!.includes(m.id));
        console.log('üéØ [ARCHIVE] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∞–º:', filteredMonitors.map(m => m.id));
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ª–æ–∫–∞—Ü–∏—è–º (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
      if (params.locations?.length) {
        filteredMonitors = filteredMonitors.filter(m => {
          const location = this._getLocationByMonitorId(m.id);
          return params.locations!.includes(location);
        });
        console.log('üó∫Ô∏è [ARCHIVE] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º:', filteredMonitors.map(m => m.id));
      }

      if (filteredMonitors.length === 0) {
        console.log('‚ö†Ô∏è [ARCHIVE] –ù–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–ø–∏—Å–µ–π');
        return [];
      }

      console.log(`üîç [ARCHIVE] –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è ${filteredMonitors.length} –º–æ–Ω–∏—Ç–æ—Ä–æ–≤`);

      // ‚úÖ –ü–†–û–°–¢–û–ô –ü–û–î–•–û–î: –ø–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      console.log('üìû [ARCHIVE] –í—ã–∑—ã–≤–∞–µ–º sentryshot getAllRecordings...');
      const allRawRecordings = await sentryshotAPI.getAllRecordings(300);
      console.log(`üìä [ARCHIVE] –ü–æ–ª—É—á–µ–Ω–æ RAW –∑–∞–ø–∏—Å–µ–π: ${allRawRecordings.length}`);

      if (allRawRecordings.length === 0) {
        console.log('‚ö†Ô∏è [ARCHIVE] –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ—Ç API');
        return [];
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
      console.log('üìã [ARCHIVE] –ü—Ä–∏–º–µ—Ä—ã RAW –∑–∞–ø–∏—Å–µ–π:', allRawRecordings.slice(0, 3).map(r => ({
        id: r.id,
        monitorId: r.monitorId,
        startTime: r.startTime.toISOString()
      })));

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∞–º
      const monitorIds = filteredMonitors.map(m => m.id);
      let filteredRecordings = allRawRecordings.filter(recording => {
        const match = monitorIds.includes(recording.monitorId);
        if (!match) {
          console.log(`‚ùå [ARCHIVE] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –∑–∞–ø–∏—Å—å ${recording.id} (–º–æ–Ω–∏—Ç–æ—Ä ${recording.monitorId} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ [${monitorIds.join(', ')}])`);
        }
        return match;
      });

      console.log(`üéØ [ARCHIVE] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∞–º: ${filteredRecordings.length} –∑–∞–ø–∏—Å–µ–π`);

      // –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
      const timeFilteredRecordings = filteredRecordings.filter((recording, index) => {
        const recordingStart = new Date(recording.startTime);
        const recordingEnd = new Date(recording.endTime);

          if (index < 5) {
    console.log(`üîç [FILTER DEBUG] === –ó–∞–ø–∏—Å—å ${index + 1}: ${recording.id} ===`);
    console.log('üîç [FILTER DEBUG] recordingStart UTC:', recordingStart.toISOString());
    console.log('üîç [FILTER DEBUG] recordingStart –º–µ—Å—Ç–Ω–æ–µ:', recordingStart.toLocaleString('ru-RU'));
    console.log('üîç [FILTER DEBUG] recordingEnd UTC:', recordingEnd.toISOString());
    console.log('üîç [FILTER DEBUG] recordingEnd –º–µ—Å—Ç–Ω–æ–µ:', recordingEnd.toLocaleString('ru-RU'));
    
    console.log('üîç [FILTER DEBUG] filterStart UTC:', params.startDate.toISOString());
    console.log('üîç [FILTER DEBUG] filterStart –º–µ—Å—Ç–Ω–æ–µ:', params.startDate.toLocaleString('ru-RU'));
    console.log('üîç [FILTER DEBUG] filterEnd UTC:', params.endDate.toISOString());
    console.log('üîç [FILTER DEBUG] filterEnd –º–µ—Å—Ç–Ω–æ–µ:', params.endDate.toLocaleString('ru-RU'));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π —Ñ–∏–ª—å—Ç—Ä–∞
    const condition1 = recordingStart < params.endDate;
    const condition2 = recordingEnd > params.startDate;
    const matchesTime = condition1 && condition2;
    
    console.log('üîç [FILTER DEBUG] recordingStart < filterEnd:', condition1, 
      `(${recordingStart.toISOString()} < ${params.endDate.toISOString()})`);
    console.log('üîç [FILTER DEBUG] recordingEnd > filterStart:', condition2,
      `(${recordingEnd.toISOString()} > ${params.startDate.toISOString()})`);
    console.log('üîç [FILTER DEBUG] –†–ï–ó–£–õ–¨–¢–ê–¢ –§–ò–õ–¨–¢–†–ê:', matchesTime ? '‚úÖ –ü–†–û–®–õ–ê' : '‚ùå –û–¢–ö–õ–û–ù–ï–ù–ê');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–Ω–∏—Ü–µ –≤—Ä–µ–º–µ–Ω–∏
    const diffStartHours = (recordingStart.getTime() - params.startDate.getTime()) / (1000 * 60 * 60);
    const diffEndHours = (params.endDate.getTime() - recordingEnd.getTime()) / (1000 * 60 * 60);
    console.log('üîç [FILTER DEBUG] –ó–∞–ø–∏—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑', diffStartHours.toFixed(2), '—á–∞—Å–æ–≤ –æ—Ç –Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞');
    console.log('üîç [FILTER DEBUG] –ó–∞–ø–∏—Å—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞', diffEndHours.toFixed(2), '—á–∞—Å–æ–≤ –¥–æ –∫–æ–Ω—Ü–∞ —Ñ–∏–ª—å—Ç—Ä–∞');
    console.log('üîç [FILTER DEBUG] ====================================');
  }
        
        // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –õ–û–ì–ò –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log(`üîç [ARCHIVE] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ ${recording.id}:`, {
          recordingStart: recordingStart.toISOString(),
          recordingStartLocal: recordingStart.toLocaleString('ru-RU'),
          recordingEnd: recordingEnd.toISOString(),
          recordingEndLocal: recordingEnd.toLocaleString('ru-RU'),
          filterStart: params.startDate.toISOString(),
          filterStartLocal: params.startDate.toLocaleString('ru-RU'),
          filterEnd: params.endDate.toISOString(),
          filterEndLocal: params.endDate.toLocaleString('ru-RU'),
          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        const matchesTime = recordingStart < params.endDate && recordingEnd > params.startDate;
        
        if (!matchesTime) {
          console.log(`‚ùå [ARCHIVE] –ó–∞–ø–∏—Å—å ${recording.id} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞:`, {
            reason: recordingStart >= params.endDate ? '–∑–∞–ø–∏—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞' :
                    recordingEnd <= params.startDate ? '–∑–∞–ø–∏—Å—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–æ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞' : '–¥—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞',
            recordingStartVsFilterEnd: `${recordingStart.toISOString()} >= ${params.endDate.toISOString()} = ${recordingStart >= params.endDate}`,
            recordingEndVsFilterStart: `${recordingEnd.toISOString()} <= ${params.startDate.toISOString()} = ${recordingEnd <= params.startDate}`
          });
        } else {
          console.log(`‚úÖ [ARCHIVE] –ó–∞–ø–∏—Å—å ${recording.id} –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏`);
        }
        
        return matchesTime;
      });

      console.log(`‚è∞ [ARCHIVE] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: ${timeFilteredRecordings.length} –∑–∞–ø–∏—Å–µ–π`);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç archiveAPI —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º location
      const enhancedRecordings: RecordingInfo[] = timeFilteredRecordings.map(recording => {
        const monitor = monitors.find(m => m.id === recording.monitorId);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
        const enhancedRecording: RecordingInfo = {
          id: recording.id,
          monitorId: recording.monitorId,
          monitorName: monitor?.name || recording.monitorName || `Monitor ${recording.monitorId}`,
          location: this._getLocationByMonitorId(recording.monitorId), // ‚úÖ –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
          startTime: recording.startTime,
          endTime: recording.endTime,
          duration: recording.duration,
          fileUrl: recording.fileUrl,
          fileSize: recording.fileSize,
          thumbnailUrl: recording.thumbnailUrl
        };
        
        return enhancedRecording;
      });

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
      enhancedRecordings.sort((a, b) =>
        new Date(b.startTime).getTime() - new Date(a.startTime).getTime()
      );

      console.log(`üèÜ [ARCHIVE] –ò–¢–û–ì–û –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${enhancedRecordings.length}`);
      console.log(`üèÜ [ARCHIVE] –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–ø–µ—Ä–≤—ã–µ 3):`, enhancedRecordings.slice(0, 3).map(r => ({
        id: r.id,
        monitorName: r.monitorName,
        startTime: r.startTime.toISOString(),
        location: r.location
      })));

      return enhancedRecordings;

    } catch (error) {
      console.error('üí• [ARCHIVE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:', error);
      return [];
    }
  },

    async fetchRawRecordings(limit: number = 300): Promise<APIRecording[]> {
    try {
      const API_BASE_URL = 'http://localhost:8080'; // Adjust if needed
      const maxRecordingId = "2200-12-28_23-59-59_x";
      
      const queryParams = new URLSearchParams();
      queryParams.set("recording-id", maxRecordingId);
      queryParams.set("limit", Math.min(limit, 1000).toString());
      queryParams.set("reverse", "false");
      queryParams.set("include-data", "true");

      const url = `${API_BASE_URL}/api/recording/query?${queryParams.toString()}`;
      console.log('üåê [ARCHIVE] URL –∑–∞–ø—Ä–æ—Å–∞:', url);

      // –ü—Ä–æ—Å—Ç–æ–π fetch –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const response = await fetch(url);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå [ARCHIVE] –û—à–∏–±–∫–∞ HTTP:', response.status, errorText);
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: ${response.status}`);
      }

      const rawData = await response.json();
      console.log('üìÑ [ARCHIVE] –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API:', rawData);

      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç –≤–∞—à–µ–≥–æ API
      if (Array.isArray(rawData)) {
        return rawData as APIRecording[];
      } else if (typeof rawData === 'object') {
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤
        return Object.values(rawData) as APIRecording[];
      }

      return [];
    } catch (error) {
      console.error('üí• [ARCHIVE] –û—à–∏–±–∫–∞ –≤ fetchRawRecordings:', error);
      return [];
    }
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
  async processAPIRecordings(rawRecordings: APIRecording[], monitors: any[]): Promise<RecordingInfo[]> {
    const processedRecordings: RecordingInfo[] = [];

    for (const rawRecord of rawRecordings) {
      try {
        if (!rawRecord.data?.start || !rawRecord.data?.end) {
          console.warn('‚ö†Ô∏è [ARCHIVE] –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫:', rawRecord.id);
          continue;
        }

        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º monitorId –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ID
        const monitorId = this.extractMonitorIdFromRecordingId(rawRecord.id);
        if (!monitorId) {
          console.warn('‚ö†Ô∏è [ARCHIVE] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å monitorId –∏–∑:', rawRecord.id);
          continue;
        }

        // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥ –≤ Date
        const startTime = new Date(rawRecord.data.start / 1_000_000); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        const endTime = new Date(rawRecord.data.end / 1_000_000);

        const monitor = monitors.find(m => m.id === monitorId);
        const monitorName = monitor?.name || `Monitor ${monitorId}`;

        const recording: RecordingInfo = {
          id: rawRecord.id,
          monitorId: monitorId,
          monitorName: monitorName,
          location: getLocationForMonitor(monitorId),
          startTime: startTime,
          endTime: endTime,
          duration: (rawRecord.data.end - rawRecord.data.start) / 1_000_000_000, // –í —Å–µ–∫—É–Ω–¥–∞—Ö
          fileUrl: sentryshotAPI.getVodUrl(monitorId, startTime, endTime, rawRecord.id),
          fileSize: undefined, // –ù–µ—Ç –≤ API –¥–∞–Ω–Ω—ã—Ö
          thumbnailUrl: `http://localhost:8080/api/recording/thumbnail/${rawRecord.id}`
        };

        processedRecordings.push(recording);

        console.log(`‚úÖ [ARCHIVE] –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞–ø–∏—Å—å:`, {
          id: recording.id,
          monitorId: recording.monitorId,
          startTime: recording.startTime.toISOString(),
          duration: recording.duration
        });

      } catch (error) {
        console.error(`‚ùå [ARCHIVE] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ ${rawRecord.id}:`, error);
      }
    }

    console.log(`üéØ [ARCHIVE] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedRecordings.length} –∏–∑ ${rawRecordings.length} –∑–∞–ø–∏—Å–µ–π`);
    return processedRecordings;
  },

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ monitorId –∏–∑ ID –∑–∞–ø–∏—Å–∏
  extractMonitorIdFromRecordingId(recordingId: string): string | null {
    try {
      // –§–æ—Ä–º–∞—Ç: "2025-06-16_16-05-25_camera1"
      const parts = recordingId.split('_');
      if (parts.length >= 3) {
        return parts[parts.length - 1];
      }
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è monitorId:', error);
      return null;
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    async getRecordingsForMonitor(
    monitorId: string,
    startTime: Date,
    endTime: Date
  ): Promise<RecordingInfo[]> {
    try {
      console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞ ${monitorId} —Å ${startTime.toISOString()} –ø–æ ${endTime.toISOString()}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–∏—Ç–æ—Ä–µ
      const monitors = await sentryshotAPI.getMonitors();
      const monitor = monitors.find(m => m.id === monitorId);
      
      if (!monitor) {
        console.warn(`–ú–æ–Ω–∏—Ç–æ—Ä ${monitorId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return [];
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º getAllRecordings –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–æ–Ω–∏—Ç–æ—Ä—É –∏ –≤—Ä–µ–º–µ–Ω–∏
      const allRecordings = await sentryshotAPI.getAllRecordings(500);
      
      const filteredRecordings = allRecordings.filter(recording => {
        // –§–∏–ª—å—Ç—Ä –ø–æ –º–æ–Ω–∏—Ç–æ—Ä—É
        if (recording.monitorId !== monitorId) return false;
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const recordingStart = new Date(recording.startTime);
        const recordingEnd = new Date(recording.endTime);
        return recordingStart <= endTime && recordingEnd >= startTime;
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
      const enhancedRecordings = filteredRecordings.map(rec => ({
        ...rec,
        location: this._getLocationByMonitorId(monitorId),
        monitorName: monitor.name,
        fileUrl: sentryshotAPI.getVodUrl(
          monitorId,
          new Date(rec.startTime),
          new Date(rec.endTime),
          rec.id
        )
      }));

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      enhancedRecordings.sort((a, b) =>
        new Date(a.startTime).getTime() - new Date(b.startTime).getTime()
      );

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${enhancedRecordings.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞ ${monitorId}`);
      return enhancedRecordings;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞:', error);
      return [];
    }
  },


  // === –°–û–ë–´–¢–ò–Ø –í –ê–†–•–ò–í–ï ===

  async getArchiveEvents(
    monitorId: string,
    startTime: Date,
    endTime: Date
  ): Promise<ArchiveEvent[]> {
    try {
      console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞ ${monitorId} —Å ${startTime.toISOString()} –ø–æ ${endTime.toISOString()}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ API –ª–æ–≥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
      const startTimeUnix = Math.floor(startTime.getTime() * 1000); // –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
      const endTimeUnix = Math.floor(endTime.getTime() * 1000);

      const logs = await sentryshotAPI.getLogs({
        monitors: [monitorId],
        time: startTimeUnix,
        limit: 1000
      });

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–≥–∏ –≤ —Å–æ–±—ã—Ç–∏—è
      const events: ArchiveEvent[] = logs
        .filter(log => log.time >= startTimeUnix && log.time <= endTimeUnix)
        .map(log => ({
          id: `${log.time}_${log.src}_${log.level}`,
          monitorId: monitorId,
          timestamp: new Date(log.time / 1000), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥
          type: this._mapLogToEventType(log.src),
          label: log.msg,
          confidence: this._extractConfidenceFromMessage(log.msg),
          data: { level: log.level, source: log.src },
          color: this._getEventColor(this._mapLogToEventType(log.src))
        }));

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${events.length} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞ ${monitorId}`);
      return events;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π:', error);
      return [];
    }
  },

  // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

   async getRecordingStats(
    params: RecordingsSearchParams,
    period: 'day' | 'week' | 'month' = 'day'
  ): Promise<RecordingStats> {
    try {
      const recordings = await this.getRecordings(params);
      
      const totalRecordings = recordings.length;
      const totalDuration = recordings.reduce((acc, rec) => acc + rec.duration, 0);
      const averageDuration = totalRecordings > 0 ? totalDuration / totalRecordings : 0;
      const recordingsSize = recordings.reduce((acc, rec) => acc + (rec.fileSize || 0), 0);

      return {
        totalRecordings,
        totalDuration,
        averageDuration,
        recordingsSize,
        period
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {
        totalRecordings: 0,
        totalDuration: 0,
        averageDuration: 0,
        recordingsSize: 0,
        period
      };
    }
  },

  // === –°–û–ó–î–ê–ù–ò–ï –ö–õ–ò–ü–û–í ===

  async createClip(
    monitorId: string,
    startTime: Date,
    endTime: Date
  ): Promise<string | null> {
    try {
      const cacheId = Date.now();
      const clipUrl = sentryshotAPI.getVodUrl(monitorId, startTime, endTime, cacheId);
      return clipUrl;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–ø–∞:', error);
      return null;
    }
  },

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–ª–∏–ø–∞
 async downloadClip(
    monitorId: string,
    startTime: Date,
    endTime: Date,
    filename?: string
  ): Promise<boolean> {
    try {
      const cacheId = Date.now();
      const clipUrl = sentryshotAPI.getVodUrl(monitorId, startTime, endTime, cacheId);

      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const link = document.createElement('a');
      link.href = clipUrl;
      link.download = filename || this._generateClipFilename(monitorId, startTime, endTime);

      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–ª–∏–ø–∞:', error);
      return false;
    }
  },

  async getDownloadUrl(recordingId: string): Promise<string> {
    // –ü–∞—Ä—Å–∏–º ID —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å monitorId –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    const parts = recordingId.split('_');
    if (parts.length < 2) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–ø–∏—Å–∏');
    }

    const monitorId = parts[0];
    // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    throw new Error('–ú–µ—Ç–æ–¥ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∏–∑ ID –∑–∞–ø–∏—Å–∏');
  },

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ ID –º–æ–Ω–∏—Ç–æ—Ä–∞
  _getLocationByMonitorId(monitorId: string): LocationType {
    return getLocationForMonitor(monitorId);
  },

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ª–æ–≥–∞ –≤ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
  _mapLogToEventType(source: string): ArchiveEvent['type'] {
    switch (source.toLowerCase()) {
      case 'motion':
        return 'motion';
      case 'tflite':
        return 'object';
      case 'alarm':
        return 'alarm';
      default:
        return 'custom';
    }
  },

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  _extractConfidenceFromMessage(message: string): number {
    const match = message.match(/(\d+)%/);
    return match ? parseInt(match[1], 10) : 50;
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
  _getEventColor(type: ArchiveEvent['type']): string {
    switch (type) {
      case 'motion':
        return '#ff9800'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
      case 'object':
        return '#4caf50'; // –ó–µ–ª–µ–Ω—ã–π
      case 'alarm':
        return '#f44336'; // –ö—Ä–∞—Å–Ω—ã–π
      case 'custom':
        return '#9c27b0'; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
      default:
        return '#2196f3'; // –°–∏–Ω–∏–π
    }
  },

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–ª–∏–ø–∞
  _generateClipFilename(monitorId: string, startTime: Date, endTime: Date): string {
    const formatTime = (date: Date) =>
      date.toISOString().replace(/[:.]/g, '-').slice(0, -5);
    
    return `clip_${monitorId}_${formatTime(startTime)}_${formatTime(endTime)}.mp4`;
  }
};