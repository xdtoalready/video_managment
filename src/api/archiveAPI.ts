import { LocationType } from '../store/useStore';
import { sentryshotAPI, TimeUtils } from './sentryshot';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ API
export interface RecordingInfo {
  id: string;
  monitorId: string;
  monitorName: string;
  location: LocationType;
  startTime: Date;
  endTime: Date;
  duration: number;
  fileUrl: string;
  fileSize?: number;
  thumbnailUrl?: string;
}

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
export interface RecordingsSearchParams {
  startDate: Date;
  endDate: Date;
  monitors?: string[];
  locations?: LocationType[];
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π
export interface RecordingStats {
  totalRecordings: number;
  totalDuration: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  averageDuration: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  recordingsSize: number; // –≤ –±–∞–π—Ç–∞—Ö
  period: 'day' | 'week' | 'month';
}

// –°–æ–±—ã—Ç–∏—è –¥–ª—è –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
export interface ArchiveEvent {
  id: string;
  monitorId: string;
  timestamp: Date;
  type: 'motion' | 'object' | 'alarm' | 'custom';
  label: string;
  confidence: number; // 0-100
  duration?: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
  data?: any; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
  color: string; // –¶–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ç–∞–π–º–ª–∞–π–Ω–µ
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ Archive API
export const archiveAPI = {
  // === –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–ü–ò–°–ï–ô ===

  async getRecordings(params: RecordingsSearchParams): Promise<RecordingInfo[]> {
  try {
    console.log('üé¨ [ARCHIVE] –ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', params);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const monitors = await sentryshotAPI.getMonitors();
    console.log('üìπ [ARCHIVE] –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—ã:', monitors.map(m => ({id: m.id, name: m.name})));
    
    let filteredMonitors = monitors;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∞–º
    if (params.monitors?.length) {
      filteredMonitors = monitors.filter(m => params.monitors!.includes(m.id));
      console.log('üéØ [ARCHIVE] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∞–º:', filteredMonitors.map(m => m.id));
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ª–æ–∫–∞—Ü–∏—è–º (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
    if (params.locations?.length) {
      filteredMonitors = filteredMonitors.filter(m => {
        const location = this._getLocationByMonitorId(m.id);
        return params.locations!.includes(location);
      });
      console.log('üó∫Ô∏è [ARCHIVE] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º:', filteredMonitors.map(m => m.id));
    }

    if (filteredMonitors.length === 0) {
      console.log('‚ö†Ô∏è [ARCHIVE] –ù–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–ø–∏—Å–µ–π');
      return [];
    }

    console.log(`üîç [ARCHIVE] –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è ${filteredMonitors.length} –º–æ–Ω–∏—Ç–æ—Ä–æ–≤`);

    // ‚úÖ –ü–†–û–°–¢–û–ô –ü–û–î–•–û–î: –ø–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    console.log('üìû [ARCHIVE] –í—ã–∑—ã–≤–∞–µ–º sentryshot getAllRecordings...');
    const allRawRecordings = await sentryshotAPI.getAllRecordings(300);
    console.log(`üìä [ARCHIVE] –ü–æ–ª—É—á–µ–Ω–æ RAW –∑–∞–ø–∏—Å–µ–π: ${allRawRecordings.length}`);

    if (allRawRecordings.length === 0) {
      console.log('‚ö†Ô∏è [ARCHIVE] –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ—Ç API');
      return [];
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    console.log('üìã [ARCHIVE] –ü—Ä–∏–º–µ—Ä—ã RAW –∑–∞–ø–∏—Å–µ–π:', allRawRecordings.slice(0, 3).map(r => ({
      id: r.id,
      monitorId: r.monitorId,
      startTime: r.startTime.toISOString()
    })));

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∞–º
    const monitorIds = filteredMonitors.map(m => m.id);
    let filteredRecordings = allRawRecordings.filter(recording => {
      const match = monitorIds.includes(recording.monitorId);
      if (!match) {
        console.log(`‚ùå [ARCHIVE] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –∑–∞–ø–∏—Å—å ${recording.id} (–º–æ–Ω–∏—Ç–æ—Ä ${recording.monitorId} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ [${monitorIds.join(', ')}])`);
      }
      return match;
    });

    console.log(`üéØ [ARCHIVE] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∞–º: ${filteredRecordings.length} –∑–∞–ø–∏—Å–µ–π`);

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
    const timeFilteredRecordings = filteredRecordings.filter(recording => {
      const recordingStart = new Date(recording.startTime);
      const recordingEnd = new Date(recording.endTime);
      const matchesTime = recordingStart <= params.endDate && recordingEnd >= params.startDate;
      
      if (!matchesTime) {
        console.log(`üïê [ARCHIVE] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –∑–∞–ø–∏—Å—å ${recording.id} –ø–æ –≤—Ä–µ–º–µ–Ω–∏:`, {
          recordingStart: recordingStart.toISOString(),
          recordingEnd: recordingEnd.toISOString(),
          filterStart: params.startDate.toISOString(),
          filterEnd: params.endDate.toISOString()
        });
      }
      
      return matchesTime;
    });

    console.log(`‚è∞ [ARCHIVE] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: ${timeFilteredRecordings.length} –∑–∞–ø–∏—Å–µ–π`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç archiveAPI —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º location
    const enhancedRecordings: RecordingInfo[] = timeFilteredRecordings.map(recording => {
      const monitor = monitors.find(m => m.id === recording.monitorId);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
      const enhancedRecording: RecordingInfo = {
        id: recording.id,
        monitorId: recording.monitorId,
        monitorName: monitor?.name || recording.monitorName || `Monitor ${recording.monitorId}`,
        location: this._getLocationByMonitorId(recording.monitorId), // –î–æ–±–∞–≤–ª—è–µ–º location
        startTime: recording.startTime,
        endTime: recording.endTime,
        duration: recording.duration,
        fileUrl: recording.fileUrl, // –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –≤ sentryshot.ts
        fileSize: recording.fileSize,
        thumbnailUrl: recording.thumbnailUrl
      };
      
      return enhancedRecording;
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    enhancedRecordings.sort((a, b) =>
      new Date(b.startTime).getTime() - new Date(a.startTime).getTime()
    );

    console.log(`üèÜ [ARCHIVE] –ò–¢–û–ì–û –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${enhancedRecordings.length}`);
    console.log(`üèÜ [ARCHIVE] –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–ø–µ—Ä–≤—ã–µ 3):`, enhancedRecordings.slice(0, 3).map(r => ({
      id: r.id,
      monitorName: r.monitorName,
      startTime: r.startTime.toISOString(),
      location: r.location
    })));

    return enhancedRecordings;

  } catch (error) {
    console.error('üí• [ARCHIVE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:', error);
    return [];
  }
},

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
   async getRecordingsForMonitor(
    monitorId: string,
    startTime: Date,
    endTime: Date
  ): Promise<RecordingInfo[]> {
    try {
      console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞ ${monitorId} —Å ${startTime.toISOString()} –ø–æ ${endTime.toISOString()}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–∏—Ç–æ—Ä–µ
      const monitors = await sentryshotAPI.getMonitors();
      const monitor = monitors.find(m => m.id === monitorId);
      
      if (!monitor) {
        console.warn(`–ú–æ–Ω–∏—Ç–æ—Ä ${monitorId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return [];
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º getAllRecordings –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–æ–Ω–∏—Ç–æ—Ä—É –∏ –≤—Ä–µ–º–µ–Ω–∏
      const allRecordings = await sentryshotAPI.getAllRecordings(500);
      
      const filteredRecordings = allRecordings.filter(recording => {
        // –§–∏–ª—å—Ç—Ä –ø–æ –º–æ–Ω–∏—Ç–æ—Ä—É
        if (recording.monitorId !== monitorId) return false;
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const recordingStart = new Date(recording.startTime);
        const recordingEnd = new Date(recording.endTime);
        return recordingStart <= endTime && recordingEnd >= startTime;
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
      const enhancedRecordings = filteredRecordings.map(rec => ({
        ...rec,
        location: this._getLocationByMonitorId(monitorId),
        monitorName: monitor.name,
        fileUrl: sentryshotAPI.getVodUrl(
          monitorId,
          new Date(rec.startTime),
          new Date(rec.endTime),
          rec.id
        )
      }));

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      enhancedRecordings.sort((a, b) =>
        new Date(a.startTime).getTime() - new Date(b.startTime).getTime()
      );

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${enhancedRecordings.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞ ${monitorId}`);
      return enhancedRecordings;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞:', error);
      return [];
    }
  },

  // === –°–û–ë–´–¢–ò–Ø –í –ê–†–•–ò–í–ï ===

  async getArchiveEvents(
    monitorId: string,
    startTime: Date,
    endTime: Date
  ): Promise<ArchiveEvent[]> {
    try {
      console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞ ${monitorId} —Å ${startTime.toISOString()} –ø–æ ${endTime.toISOString()}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ API –ª–æ–≥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
      const startTimeUnix = Math.floor(startTime.getTime() * 1000); // –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
      const logs = await sentryshotAPI.getLogs({
        monitors: [monitorId],
        sources: ['motion', 'tflite'], // –°–æ–±—ã—Ç–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
        time: startTimeUnix,
        limit: 1000
      });

      console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${logs.length} —Å–æ–±—ã—Ç–∏–π –∏–∑ –ª–æ–≥–æ–≤`);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–≥–∏ –≤ —Å–æ–±—ã—Ç–∏—è –∞—Ä—Ö–∏–≤–∞
      return logs
        .filter(log => {
          const logTime = new Date(TimeUtils.unixMicroToIso(log.time));
          return logTime >= startTime && logTime <= endTime;
        })
        .map(log => ({
          id: `${log.monitorID}_${log.time}`,
          monitorId: log.monitorID,
          timestamp: new Date(TimeUtils.unixMicroToIso(log.time)),
          type: this._mapLogToEventType(log.src),
          label: log.msg,
          confidence: this._extractConfidenceFromMessage(log.msg),
          color: this._getEventColor(this._mapLogToEventType(log.src))
        }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –∞—Ä—Ö–∏–≤–∞:', error);
      return [];
    }
  },

  // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

  async getRecordingStats(
    monitorId: string,
    period: 'day' | 'week' | 'month'
  ): Promise<RecordingStats> {
    try {
      const endDate = new Date();
      const startDate = new Date();

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
      switch (period) {
        case 'day':
          startDate.setDate(endDate.getDate() - 1);
          break;
        case 'week':
          startDate.setDate(endDate.getDate() - 7);
          break;
        case 'month':
          startDate.setMonth(endDate.getMonth() - 1);
          break;
      }

      const recordings = await this.getRecordingsForMonitor(monitorId, startDate, endDate);

      const totalRecordings = recordings.length;
      const totalDuration = recordings.reduce((sum, rec) => sum + rec.duration, 0);
      const averageDuration = totalRecordings > 0 ? totalDuration / totalRecordings : 0;
      const recordingsSize = recordings.reduce((sum, rec) => sum + (rec.fileSize || 0), 0);

      return {
        totalRecordings,
        totalDuration,
        averageDuration,
        recordingsSize,
        period
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø–∏—Å–µ–π:', error);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
      return {
        totalRecordings: 0,
        totalDuration: 0,
        averageDuration: 0,
        recordingsSize: 0,
        period
      };
    }
  },

  // === –°–û–ó–î–ê–ù–ò–ï –ö–õ–ò–ü–û–í ===

  async createClip(
    monitorId: string,
    startTime: Date,
    endTime: Date,
    title?: string
  ): Promise<string | null> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º VOD API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞
      const clipUrl = sentryshotAPI.getVodUrl(monitorId, startTime, endTime);
      return clipUrl;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–ø–∞:', error);
      return null;
    }
  },

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–ª–∏–ø–∞
  async downloadClip(
    monitorId: string,
    startTime: Date,
    endTime: Date,
    filename?: string
  ): Promise<boolean> {
    try {
      const clipUrl = sentryshotAPI.getVodUrl(monitorId, startTime, endTime);

      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const link = document.createElement('a');
      link.href = clipUrl;
      link.download = filename || this._generateClipFilename(monitorId, startTime, endTime);

      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–ª–∏–ø–∞:', error);
      return false;
    }
  },

  async getDownloadUrl(recordingId: string): Promise<string> {
    // –ü–∞—Ä—Å–∏–º ID —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å monitorId –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    const parts = recordingId.split('_');
    if (parts.length < 2) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–ø–∏—Å–∏');
    }

    const monitorId = parts[0];
    // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    throw new Error('–ú–µ—Ç–æ–¥ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∏–∑ ID –∑–∞–ø–∏—Å–∏');
  },

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ ID –º–æ–Ω–∏—Ç–æ—Ä–∞
  _getLocationByMonitorId(monitorId: string): LocationType {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ locationMapping
    const { getLocationForMonitor } = require('../constants/locationMapping');
    return getLocationForMonitor(monitorId);
  },

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ª–æ–≥–∞ –≤ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
  _mapLogToEventType(source: string): ArchiveEvent['type'] {
    switch (source.toLowerCase()) {
      case 'motion':
        return 'motion';
      case 'tflite':
        return 'object';
      case 'alarm':
        return 'alarm';
      default:
        return 'custom';
    }
  },

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  _extractConfidenceFromMessage(message: string): number {
    const match = message.match(/(\d+)%/);
    return match ? parseInt(match[1], 10) : 50;
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
  _getEventColor(type: ArchiveEvent['type']): string {
    switch (type) {
      case 'motion':
        return '#ff9800'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
      case 'object':
        return '#4caf50'; // –ó–µ–ª–µ–Ω—ã–π
      case 'alarm':
        return '#f44336'; // –ö—Ä–∞—Å–Ω—ã–π
      case 'custom':
        return '#9c27b0'; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
      default:
        return '#2196f3'; // –°–∏–Ω–∏–π
    }
  },

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–ª–∏–ø–∞
  _generateClipFilename(monitorId: string, startTime: Date, endTime: Date): string {
    const formatTime = (date: Date) =>
      date.toISOString().replace(/[:.]/g, '-').slice(0, -5);

    return `clip_${monitorId}_${formatTime(startTime)}_${formatTime(endTime)}.mp4`;
  }
};